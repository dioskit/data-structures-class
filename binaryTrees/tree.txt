introduction to trees
- What need to be stored?
-cost of operations
-memory useage
-ease of implementation

--trees can be used for storage of hirearcial  data:
eg organisational hirearcy of employes of a compaly
--collection of nodes in a hirearcy
--tree is a non linear data structure
--top node is called root of the tree

nodes will have some data and link or referance to other data structure
root, childern, parent sibling, leaf nodes
                            
                           1 root
                    _______|_______       
                    |              |
                    2              3            //2,3 are children nodes of 1
                 ___|_____       __|____
                |   |    |       |     |
                4   5    6       7     8         //4,5,6 are childern of 2, and 2 is their parent node and 7.8 are childern of 3 ans so on 
                   _|_           |
                  |   |          |
                  9   10         11              // 9,10,11,4,6,7,8 are called leaf nodes since they no other nodes linked to them
application
1. storing naturally hierarcial data eg:file system
2. organize data for quick search, insertion, deletion eg: binary search trees
3. Trie //dictionary
4. network routing algorithm 
so on 

binary tree
each node can have atmost 2 childern
Complete binary tree:
    all level s except possibly the last are cmop;ete;y  filled and all nodes are left as possible
depth: how deep is level of nodes its called the height of the tree

Maximum number of nudes at level i = 2^i;

perfect binary tree:
maximum number of nodes in a tree with height h
= 2^0+2^1+. . .+2^h
= 2^(h+1)-1

n = number of nodes
n = 2^(n+1) -  1
2^(n+1) = (n+1)
n = log-base-2 (n+1) - 1
height of complete binary tree  = log-base-2 (n) 

balanced binary tree
difference between height of left and right subtree for every node is not more than k(mostly 1)
height -> number of edges in longest path from root to a leaf
so: height of an empty tree = -1
so: height of a tree with one node = 0
difference between heights of subtrees can be found with
diff = |heightLeft - heightRight|   //say leaf nodes will be 0 as they have no right and left subtree
eg 
        [diff = 0 ]
     _______|____________
     |                   |
    [2]                 [1]      //2 because |1-(-1)| = 2 and |1 - 1| = 1
     |              _____|____
     |             |          |
    [0]           [0]        [0]    // |-1 -(-1)| = 0
  ___|___
  |      |
 [0]    [0] 

 we can implement binary tree using:
 
        0[0]
      _______|____________
      |                   |
    1[4]                 2[1]     
      |                    |
   |       |           |         |
 3[5]    4[8]        5[7]      6[9]
                      
 a> dynamically created nodes 
 struct node{
    int data;
    struct node* right;
    struct node* left;
 }

b> arrys
int tree[] ={2,4,1,5,8,7,9}
for(int i = 0; i < arryLenth; i++){
    leftChildIndex = tree[2i+1]
    rightChildIndex = tree[2i+2]
}
arrys are used to implement heahs*





.
.
.
// Online C compiler to run C program online
#include <stdio.h>
int vertices;
void implement(int adj[][vertices]){
    for(int i=0;i<vertices;i++){
        for(int j=0;j<vertices;j++){
            adj[i][j] = 0;
        }
    }
}
void print(int adj[][vertices]){
    for(int i=0;i<vertices;i++){
        for(int j=0;j<vertices;j++){
            printf(" %d ",adj[i][j]);
        }
        printf("\n");
    }
}
int main() {
    printf("Number of vertices\n");
    scanf("%d",&vertices);
    int adj[vertices][vertices];
    implement(adj);
    int s,d;
    printf("choose connections from (0,0) to (%d,%d)\n",vertices-1,vertices-1);
    while(s!=-1 && d!=-1){
        scanf("%d %d",&s,&d);
        adj[s][d] = 1;
        adj[d][s] =1;
    }
    print(adj);
    return 0;
}